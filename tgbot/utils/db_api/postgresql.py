# -*- coding: utf-8 -*-
from typing import Union
import pickle5 as pickle
import asyncpg
from asyncpg.pool import Pool
from data import config


# select * from orders where create_date between '2014-04-01 00:00:00'::timestamp and '2014-04-01 23:59:59'::timestamp order by id desc;

class Database:
    def __init__(self):
        """Создается база данных без подключения в loader"""

        self.pool: Union[Pool, None] = None

    async def create(self):
        """В этой функции создается подключение к базе"""

        pool = await asyncpg.create_pool(
            user=config.PGUSER,  # Пользователь базы (postgres или ваше имя), для которой была создана роль
            password=config.PGPASSWORD,  # Пароль к пользователю
            host=config.ip,  # Ip адрес базы данных. Если локальный компьютер - localhost, если докер - название сервиса
            database=config.DATABASE  # Название базы данных. По умолчанию - postgres, если вы не создавали свою
        )
        self.pool = pool

    async def create_table_users(self):
        sql = """
        CREATE TABLE IF NOT EXISTS Users (
        id INT NOT NULL,
        name varchar (255) NOT NULL,
        email varchar (255),
        town varchar (255),
        telephone varchar (255),
        area INT ,
        description varchar (255),
        source varchar (255),
        what_service varchar (255),
        our_price INT ,
        new INT ,   
        date_now varchar (100),                         
        PRIMARY KEY (id) 
        );
"""
        await self.pool.execute(sql)

    @staticmethod
    def format_args(sql, parameters: dict):
        sql += " AND ".join([
            f"{item} = ${num + 1}" for num, item in enumerate(parameters)
        ])
        return sql, tuple(parameters.values())
        # id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    async def create_table_customers(self):  # Создаем базу заказчиков
        sql = """
        CREATE TABLE IF NOT EXISTS Customers (       
        
        id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        organization_name varchar (255),
        customer_name varchar (255),
        customer_short_name varchar (255),
        organisation_INN varchar (255),
        organisation_KPP varchar (255),
        ogrn INT,
        bank_ks INT,
        organisation_leader varchar (255),
        osnovanie_predstavitelya varchar (255),
        organisation_adress varchar (500),
        bank_bik INT ,
        summa_pokupok INT,
        sredniy_chek INT,
        data_pervogo_obrasheniya varchar (255),
        passport_number varchar (255),
        whenissued varchar (255),
        issued varchar (255),
        telephone varchar (255),
        placeofregistration varchar (255),
        email varchar (255),
        town varchar (255),
        instagram_id varchar (255),
        facebook_id varchar (255),
        vk_id varchar (255),
        contracts VARCHAR ,                      
        date_last_edit varchar (100)                         
        );
"""
        await self.pool.execute(sql)

    async def create_table_designers(self):  # Создаем базу заказчиков
        sql = """
            CREATE TABLE IF NOT EXISTS Designers (                   
            organization_name varchar (255),
            designer_name varchar (255),               
            telephone varchar (255),
            email varchar (255),
            town varchar (255),
            instagram_id varchar (255),
            facebook_id varchar (255),
            vk_id varchar (255),
            contracts VARCHAR , 
            price_per_square_meter varchar (255),                    
            date_last_edit varchar (100)                         
            );
    """
        await self.pool.execute(sql)

    async def create_table_profit(self):  # Создаем базу заказчиков
        sql = """
            CREATE TABLE IF NOT EXISTS Profit (                   
            profit varchar (255),
            description_of_payment VARCHAR , 
            datetime varchar (255),                    
            date_last_edit varchar (100)                         
            );
    """
        await self.pool.execute(sql)

    async def add_profit(self, profit: int, description_of_payment: str = 'noname', datetime='2021-01-19',
                         date_last_edit: str = '2021-01-19', date_right_format='2021-01-01', source: str = '0',
                         customer_id: int = 0):
        # SQL_EXAMPLE = "INSERT INTO Users(id, Name, email) VALUES(1, 'John', 'John@gmail.com')"

        sql = """
        INSERT INTO Profit(profit,description_of_payment,datetime,date_last_edit,date_right_format, source, customer_id) VALUES($1, $2, $3,$4,$5,$6,$7)
        """
        await self.pool.execute(sql, profit, description_of_payment, datetime, date_last_edit, date_right_format,
                                source, customer_id)

    async def select_all_profit(self):
        sql = """
        SELECT * FROM Profit 
        """
        return await self.pool.fetch(sql)

    async def select_min_date_profit(self):
        sql = """
        SELECT date_right_format FROM Profit ORDER BY date_right_format  ;
        """
        return await self.pool.fetchval(sql)

    async def select_diapazon_profit(self, arg1, arg2):
        sql = f"""
        SELECT * FROM Profit WHERE date_right_format >= '{arg1}' AND date_right_format < '{arg2}';
        """

        return await self.pool.fetch(sql)

    async def add_user(self, id: int, name: str = 'noname', email: str = 'no email', town: str = 'no town',
                       telephone: str = '89000000',
                       area: int = 0, description: str = 'no description', source: str = 'unknown',
                       what_service: str = 'no service',
                       our_price: int = 0, new: int = 0, date_now='01.01.1978'):
        # SQL_EXAMPLE = "INSERT INTO Users(id, Name, email) VALUES(1, 'John', 'John@gmail.com')"

        sql = """
        INSERT INTO Users(id,name,email,town,telephone,area,description,source,what_service,our_price,new,date_now) VALUES($1, $2, $3,$4, $5, $6,$7, $8, $9,$10, $11,$12)
        """
        await self.pool.execute(sql, id, name, email, town, telephone, area, description, source, what_service,
                                our_price, new, date_now)

    async def select_all_users(self):
        sql = """
        SELECT * FROM Users 
        """
        return await self.pool.fetch(sql)

        # return await self.pool.fetch(sql)

    async def select_all_clients(self):
        sql = """
        SELECT * FROM Clients 
        """
        return await self.pool.fetch(sql)

    async def add_customer(self, organization_name: str = 'noname', email: str = 'no email',
                           town: str = 'no town',
                           telephone: str = '89000000', customer_name: str = 'noname',
                           customer_short_name: str = 'noname',
                           organisation_INN: str = '0', organisation_KPP: str = '0', ogrn: int = 0, bank_ks: str = '0',
                           organisation_leader: str = 'noname',
                           osnovanie_predstavitelya: str = 'действующего на основании Устава предприятия',
                           organisation_adress: str = 'noname', bank_bik: int = 0, summa_pokupok: int = 0,
                           sredniy_chek: int = 0,
                           data_pervogo_obrasheniya: str = 'noname', passport_number: str = 'noname',
                           whenissued: str = 'noname',
                           issued: str = 'noname',
                           placeofregistration: str = 'noname', instagram_id: str = '0', facebook_id: str = '0',
                           vk_id: str = '0',
                           contracts: str = '["Договор №001","Договор № 002"]', date_last_edit: str = 'noname'):
        sql = """
        INSERT INTO customers (organization_name,customer_name,customer_short_name,organisation_INN,organisation_KPP,ogrn,bank_ks,organisation_leader,
        osnovanie_predstavitelya,organisation_adress,bank_bik,summa_pokupok,sredniy_chek,data_pervogo_obrasheniya,passport_number,whenissued,issued,
        telephone,placeofregistration,email,town,instagram_id,facebook_id,vk_id,contracts,date_last_edit) VALUES($1, $2, $3,$4, $5, $6,$7, $8, $9,$10,
         $11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26)
        """
        await self.pool.execute(sql, organization_name, customer_name, customer_short_name, organisation_INN,
                                organisation_KPP, ogrn, bank_ks, organisation_leader,
                                osnovanie_predstavitelya, organisation_adress, bank_bik, summa_pokupok, sredniy_chek,
                                data_pervogo_obrasheniya, passport_number, whenissued, issued,
                                telephone, placeofregistration, email, town, instagram_id, facebook_id, vk_id,
                                contracts, date_last_edit)

    async def select_user(self, **kwargs):
        # SQL_EXAMPLE = "SELECT * FROM Users where id=1 AND Name='John'"
        sql = f"""
        SELECT * FROM Users WHERE 
        """
        sql, parameters = self.format_args(sql, parameters=kwargs)
        return await self.pool.fetchrow(sql, *parameters)

    async def count_users(self):
        return await self.pool.fetchval("SELECT COUNT(*) FROM Users")

    async def update_user_email(self, email, id):
        # SQL_EXAMPLE = "UPDATE Users SET email=mail@gmail.com WHERE id=12345"

        sql = f"""
        UPDATE Users SET email=$1 WHERE id=$2
        """
        return await self.pool.execute(sql, email, id)

    async def delete_users(self):
        await self.pool.execute("DELETE FROM Users WHERE TRUE")

    async def select_customers(self):
        # SQL_EXAMPLE = "SELECT * FROM Users where id=1 AND Name='John'"
        sql = f"""
        SELECT * FROM Contract WHERE customer_id::text = '21'

        """
        return await self.pool.fetch(sql)


def Schetchic_Saver(schetchik):
    with open(config.SCHETCHIK_PATH2, "wb") as f:
        pickle.dump(schetchik, f, protocol=pickle.HIGHEST_PROTOCOL)
    with open(config.SCHETCHIK_PATH2, 'rb') as f:
        loaded_data = pickle.load(f)  # Загружаем экземпляр класса
    print(f'Новое показание счетчика:{loaded_data}')


def Schetchic_create():
    sch = 0
    Schetchic_Saver(sch)


def Schetchic_clear():
    with open(config.SCHETCHIK_PATH2, 'rb') as f:
        loaded_data = pickle.load(f)  # Загружаем экземпляр класса
    loaded_data['value'] = 0
    Schetchic_Saver(loaded_data)


def Schetchic_Pusher():
    with open(config.SCHETCHIK_PATH2, 'rb') as f:
        loaded_data = pickle.load(f)  # Загружаем экземпляр класса
    try:
        new_sch = int(loaded_data['value'])
        new_sch += 1
        Schetchic_Saver(new_sch)

    except:
        new_sch = 1
        Schetchic_Saver(new_sch)
